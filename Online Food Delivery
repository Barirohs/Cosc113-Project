import java.util.*;

public class Main {

    interface Payable {
        void processPayment(double amount);
    }

    static class MenuItem {
        String name;
        double price;

        MenuItem(String name, double price) {
            this.name = name;
            this.price = price;
        }
    }

    static class Cart {
        List<MenuItem> items = new ArrayList<>();

        void addItem(MenuItem item) {
            items.add(item);
            System.out.println(item.name + " added to cart.");
        }

        double calculateTotal() {
            double total = 0;
            for (MenuItem item : items) {
                total += item.price;
            }
            return total;
        }

        void printReceipt(String customerName) {
            System.out.println("Receipt for " + customerName);
            System.out.println("---------------------------");
            for (MenuItem item : items) {
                System.out.println(item.name + " - $" + item.price);
            }
            System.out.println("---------------------------");
            System.out.println("Total: $" + calculateTotal());
            System.out.println("Receipt printed.\n");
        }
    }

    static class Person {
        String name;
        String address;

        Person(String name, String address) {
            this.name = name;
            this.address = address;
        }
    }

    static class Customer extends Person {
        Cart cart = new Cart();

        Customer(String name, String address) {
            super(name, address);
        }

        void addToCart(MenuItem item) {
            cart.addItem(item);
        }

        void checkout(Payable paymentMethod) {
            double total = cart.calculateTotal();
            paymentMethod.processPayment(total);
            System.out.println("Order placed by " + name + ", delivery to: " + address);
            cart.printReceipt(name);
        }
    }

    static class CreditCardPayment implements Payable {
        public void processPayment(double amount) {
            System.out.println("Processing credit card payment of $" + amount);
        }
    }

    static class Review {
        String customerName;
        int rating;
        String comment;

        Review(String customerName, int rating, String comment) {
            this.customerName = customerName;
            this.rating = rating;
            this.comment = comment;
        }
    }
    static class Restaurant {
        String region;
        String country;
        List<MenuItem> menu = new ArrayList<>();
        List<Review> reviews = new ArrayList<>();

        Restaurant(String region, String country) {
            this.region = region;
            this.country = country;
            populateMenu();
        }

        void populateMenu() {
            if (country.equals("China")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Sweet and Sour Pork", 8.99),
                    new MenuItem("Kung Pao Chicken", 7.99),
                    new MenuItem("Fried Rice", 5.99),
                    new MenuItem("Spring Rolls", 3.49),
                    new MenuItem("Dumplings", 4.49)
                ));
            } else if (country.equals("India")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Butter Chicken", 11.99),
                    new MenuItem("Samosa", 2.49),
                    new MenuItem("Paneer Tikka", 9.99),
                    new MenuItem("Naan", 1.99),
                    new MenuItem("Biryani", 10.99)
                ));
            } else if (country.equals("Japan")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Sushi", 12.99),
                    new MenuItem("Ramen", 10.49),
                    new MenuItem("Tempura", 8.99),
                    new MenuItem("Gyoza", 5.49),
                    new MenuItem("Miso Soup", 2.99)
                ));
            } else if (country.equals("Bangladesh")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Beef Curry", 10.99),
                    new MenuItem("Paratha", 2.99),
                    new MenuItem("Dal", 4.99),
                    new MenuItem("Fish Curry", 10.49),
                    new MenuItem("Payesh", 4.99)
                ));
            } else if (country.equals("Pakistan")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Nihari", 12.99),
                    new MenuItem("Seekh Kebab", 8.99),
                    new MenuItem("Biryani", 9.99),
                    new MenuItem("Roti", 1.49),
                    new MenuItem("Haleem", 10.49)
                ));
            } else if (country.equals("Nigeria")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Jollof Rice", 8.99),
                    new MenuItem("Egusi Soup", 7.49),
                    new MenuItem("Pounded Yam", 6.99),
                    new MenuItem("Suya", 5.99),
                    new MenuItem("Pepper Soup", 6.99)
                ));
            } else if (country.equals("Ghana")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Waakye", 8.99),
                    new MenuItem("Fufu and Light Soup", 10.99),
                    new MenuItem("Kelewele", 3.99),
                    new MenuItem("Banku and Tilapia", 11.99),
                    new MenuItem("Red Red", 7.99)
                ));
            } else if (country.equals("Kenya")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Nyama Choma", 11.99),
                    new MenuItem("Ugali", 4.99),
                    new MenuItem("Sukuma Wiki", 3.99),
                    new MenuItem("Pilau", 7.49),
                    new MenuItem("Chapati", 2.99)
                ));
            } else if (country.equals("Senegal")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Thieboudienne", 12.99),
                    new MenuItem("Yassa Chicken", 10.49),
                    new MenuItem("Mafe", 9.99),
                    new MenuItem("Dibi", 10.49),
                    new MenuItem("Bissap", 2.99)
                ));
            } else if (country.equals("Mexico")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Tacos al Pastor", 9.99),
                    new MenuItem("Enchiladas", 8.99),
                    new MenuItem("Quesadillas", 7.49),
                    new MenuItem("Churros", 3.99),
                    new MenuItem("Guacamole", 4.99)
                ));
            } else if (country.equals("Cuba")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Ropa Vieja", 10.49),
                    new MenuItem("Arroz con Pollo", 9.99),
                    new MenuItem("Tostones", 3.99),
                    new MenuItem("Picadillo", 7.99),
                    new MenuItem("Flan Cubano", 4.49)
                ));
            } else if (country.equals("Dominican Republic")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("La Bandera", 9.99),
                    new MenuItem("Mangu", 6.49),
                    new MenuItem("Sancocho", 10.99),
                    new MenuItem("Chicharr√≥n", 7.49),
                    new MenuItem("Tres Leches Cake", 3.99)
                ));
            } else if (country.equals("Colombia")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Arepas", 3.99),
                    new MenuItem("Bandeja Paisa", 12.99),
                    new MenuItem("Empanadas", 2.99),
                    new MenuItem("Ajiaco", 9.99),
                    new MenuItem("Lechona", 11.99)
                ));
            } else if (country.equals("USA")) {
                menu.addAll(Arrays.asList(
                    new MenuItem("Burger", 10.99),
                    new MenuItem("Fries", 3.49),
                    new MenuItem("Hot Dog", 5.99),
                    new MenuItem("BBQ Ribs", 14.99),
                    new MenuItem("Apple Pie", 5.49)
                ));
            }
        }

        void showMenu() {
            System.out.println("\nMenu for " + country + " (" + region + "):");
            for (int i = 0; i < menu.size(); i++) {
                System.out.printf("%2d. %-25s $%.2f%n", i + 1, menu.get(i).name, menu.get(i).price);
            }
        }

        void addReview(Review review) {
            reviews.add(review);
        }

        void showReviews() {
            System.out.println("\nReviews for " + country + ":");
            if (reviews.isEmpty()) {
                System.out.println("  No reviews yet.");
            } else {
                for (Review r : reviews) {
                    System.out.println(r.customerName + " (" + r.rating + "/5): " + r.comment);
                }
            }
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Food Ordering App!");

        String name = getValidInput(scanner, "Enter your name: ");
        String address = getValidInput(scanner, "Enter your delivery address: ");
        Customer customer = new Customer(name, address);

        String[] regions = {"Asian", "African", "Hispanic", "American"};
        Map<String, List<String>> countriesByRegion = new HashMap<>();
        countriesByRegion.put("Asian", Arrays.asList("China", "India", "Japan", "Bangladesh", "Pakistan"));
        countriesByRegion.put("African", Arrays.asList("Nigeria", "Ghana", "Kenya", "Senegal"));
        countriesByRegion.put("Hispanic", Arrays.asList("Mexico", "Cuba", "Dominican Republic", "Colombia"));
        countriesByRegion.put("American", Arrays.asList("USA"));

        while (true) {
            System.out.println("\nSelect a region:");
            for (int i = 0; i < regions.length; i++) {
                System.out.printf("  %d. %s%n", i + 1, regions[i]);
            }
            int regionChoice = getValidChoice(scanner, 1, regions.length);
            String region = regions[regionChoice - 1];

            List<String> countries = countriesByRegion.get(region);
            System.out.println("\nSelect a country in " + region + ":");
            for (int i = 0; i < countries.size(); i++) {
                System.out.printf("  %d. %s%n", i + 1, countries.get(i));
            }
            int countryChoice = getValidChoice(scanner, 1, countries.size());
            String country = countries.get(countryChoice - 1);

            Restaurant restaurant = new Restaurant(region, country);
            restaurant.showMenu();

            while (true) {
                System.out.print("\nEnter item number to add to cart (0 to finish): ");
                int itemChoice = getValidChoice(scanner, 0, restaurant.menu.size());
                if (itemChoice == 0) break;
                customer.addToCart(restaurant.menu.get(itemChoice - 1));
            }

            customer.checkout(new CreditCardPayment());

            System.out.print("Would you like to leave a review from 1-5? (yes/no): ");
            String response = scanner.nextLine().trim().toLowerCase();
            if (response.equals("yes")) {
                int rating = getValidChoice(scanner, 1, 5);
                System.out.print("Enter your comment: ");
                String comment = scanner.nextLine();
                restaurant.addReview(new Review(name, rating, comment));
                System.out.println("Thank you for your review!");
            }

            restaurant.showReviews();

            System.out.print("\nWould you like to order from another country? (yes/no): ");
            String again = scanner.nextLine().trim().toLowerCase();
            if (!again.equals("yes")) {
                System.out.println("Thank you for using the Food Ordering App!");
                break;
            }
        }

        scanner.close();
    }

    static String getValidInput(Scanner scanner, String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine().trim();
            if (!input.isEmpty()) return input;
            System.out.println("Input cannot be empty. Try again.");
        }
    }

    static int getValidChoice(Scanner scanner, int min, int max) {
        while (true) {
            if (scanner.hasNextInt()) {
                int val = scanner.nextInt();
                scanner.nextLine(); // clear newline
                if (val >= min && val <= max) return val;
            } else {
                scanner.nextLine(); // clear bad input
            }
            System.out.print("Invalid. Enter a number between " + min + " and " + max + ": ");
        }
    }
}
