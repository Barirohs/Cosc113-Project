import java.util.*;

// Interface for payment
interface Payable {
    void processPayment(double amount);
}

// Abstract class for Restaurant
abstract class Restaurant {
    String name;
    String cuisineType;
    List<MenuItem> menu = new ArrayList<>();

    public Restaurant(String name, String cuisineType) {
        this.name = name;
        this.cuisineType = cuisineType;
        populateMenu();
    }

    abstract void populateMenu();

    public void displayMenu() {
        System.out.println("\nMenu for " + name + " (" + cuisineType + "):");
        for (int i = 0; i < menu.size(); i++) {
            MenuItem item = menu.get(i);
            System.out.println((i + 1) + ". " + item.name + " - $" + item.price);
        }
    }
}

// Concrete restaurant types
class AsianRestaurant extends Restaurant {
    public AsianRestaurant(String name) {
        super(name, "Asian");
    }

    void populateMenu() {
        menu.add(new MenuItem("Sushi", 12.99));
        menu.add(new MenuItem("Ramen", 9.49));
    }
}

class AfricanRestaurant extends Restaurant {
    public AfricanRestaurant(String name) {
        super(name, "African");
    }

    void populateMenu() {
        menu.add(new MenuItem("Jollof Rice", 10.99));
        menu.add(new MenuItem("Egusi Soup", 11.99));
    }
}

class HispanicRestaurant extends Restaurant {
    public HispanicRestaurant(String name) {
        super(name, "Hispanic");
    }

    void populateMenu() {
        menu.add(new MenuItem("Tacos", 8.99));
        menu.add(new MenuItem("Burrito", 9.49));
    }
}

class AmericanRestaurant extends Restaurant {
    public AmericanRestaurant(String name) {
        super(name, "American");
    }

    void populateMenu() {
        menu.add(new MenuItem("Burger", 10.99));
        menu.add(new MenuItem("Fries", 4.49));
    }
}

// Menu item class
class MenuItem {
    String name;
    double price;

    public MenuItem(String name, double price) {
        this.name = name;
        this.price = price;
    }
}

// Cart class
class Cart {
    List<MenuItem> items = new ArrayList<>();

    public void addItem(MenuItem item) {
        items.add(item);
        System.out.println(item.name + " added to cart.");
    }

    public double calculateTotal() {
        double total = 0;
        for (MenuItem item : items) {
            total += item.price;
        }
        return total;
    }
}

// Person base class
class Person {
    String name;
    String address;

    public Person(String name, String address) {
        this.name = name;
        this.address = address;
    }
}

// Customer class
class Customer extends Person {
    Cart cart = new Cart();

    public Customer(String name, String address) {
        super(name, address);
    }

    public void addToCart(MenuItem item) {
        cart.addItem(item);
    }

    public void checkout(Payable paymentMethod) {
        double total = cart.calculateTotal();
        paymentMethod.processPayment(total);
        System.out.println("Order placed by " + name + ", delivery to: " + address);
    }
}

// Payment implementations
class CreditCardPayment implements Payable {
    public void processPayment(double amount) {
        System.out.println("Processing credit card payment of $" + amount);
    }
}

class CashPayment implements Payable {
    public void processPayment(double amount) {
        System.out.println("Processing cash payment of $" + amount);
    }
}

// Main Application
public class FoodOrderingApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        System.out.print("Enter your address: ");
        String address = scanner.nextLine();

        Customer customer = new Customer(name, address);

        // List of restaurants
        List<Restaurant> restaurants = Arrays.asList(
                new AsianRestaurant("Dragon Express"),
                new AfricanRestaurant("Mama Africa"),
                new HispanicRestaurant("Casa Mexicana"),
                new AmericanRestaurant("Burger Barn")
        );

        // Restaurant selection
        System.out.println("\nAvailable Restaurants:");
        for (int i = 0; i < restaurants.size(); i++) {
            System.out.println((i + 1) + ". " + restaurants.get(i).name + " - " + restaurants.get(i).cuisineType);
        }
        System.out.print("Choose a restaurant (1-" + restaurants.size() + "): ");
        int restaurantChoice = scanner.nextInt();
        scanner.nextLine(); // consume newline

        Restaurant chosenRestaurant = restaurants.get(restaurantChoice - 1);
        chosenRestaurant.displayMenu();

        // Menu selection loop
        while (true) {
            System.out.print("Enter item number to add to cart (0 to finish): ");
            int itemChoice = scanner.nextInt();
            if (itemChoice == 0) break;
            if (itemChoice > 0 && itemChoice <= chosenRestaurant.menu.size()) {
                customer.addToCart(chosenRestaurant.menu.get(itemChoice - 1));
            } else {
                System.out.println("Invalid choice.");
            }
        }

        // Payment selection
        System.out.print("\nChoose payment method (1: Credit Card, 2: Cash): ");
        int paymentChoice = scanner.nextInt();
        Payable payment;
        if (paymentChoice == 1) {
            payment = new CreditCardPayment();
        } else {
            payment = new CashPayment();
        }

        customer.checkout(payment);
        System.out.println("Thank you for your order!");
    }
}
