import java.util.Scanner;

// Main class for the Food Ordering App
public class FoodOrderingApp {

    // MenuItem class representing each menu item
    static class MenuItem {
        public String name;
        public double price;

        public MenuItem(String name, double price) {
            this.name = name;
            this.price = price;
        }
    }

    // Payable interface to define payment processing
    interface Payable {
        void processPayment(double amount);
    }

    // CreditCardPayment class for processing credit card payments
    static class CreditCardPayment implements Payable {
        public void processPayment(double amount) {
            System.out.println("Processing credit card payment of $" + amount);
        }
    }

    // Person class that holds basic information for both customers and other types of users
    static class Person {
        public String name;
        public String address;

        public Person(String name, String address) {
            this.name = name;
            this.address = address;
        }
    }

    // Customer class extending Person and adds functionality for cart and checkout
    static class Customer extends Person {
        public Cart cart;

        public Customer(String name, String address) {
            super(name, address);
            cart = new Cart();
        }

        public void addToCart(MenuItem item) {
            cart.addItem(item);
        }

        public void checkout(Payable paymentMethod) {
            double total = cart.calculateTotal();
            paymentMethod.processPayment(total);
            System.out.println("Order placed by " + name + " to be delivered at " + address);
        }
    }

    // Cart class representing the customer's shopping cart
    static class Cart {
        public MenuItem[] items;
        public int itemCount;

        public Cart() {
            items = new MenuItem[20];
            itemCount = 0;
        }

        public void addItem(MenuItem item) {
            if (itemCount < items.length) {
                items[itemCount++] = item;
                System.out.println(item.name + " added to cart.");
            }
        }

        public double calculateTotal() {
            double total = 0;
            for (int i = 0; i < itemCount; i++) {
                total += items[i].price;
            }
            return total;
        }
    }

    // Abstract class Restaurant, which will be extended by specific types of restaurants
    static abstract class Restaurant {
        public String name;
        public MenuItem[] menu;
        public int itemCount;

        public Restaurant(String name) {
            this.name = name;
            this.menu = new MenuItem[10];
            this.itemCount = 0;
            populateMenu();
        }

        public void addMenuItem(MenuItem item) {
            if (itemCount < menu.length) {
                menu[itemCount++] = item;
            }
        }

        // Abstract method for populating menu, which will be implemented by subclasses
        public abstract void populateMenu();

        // Show the restaurant menu
        public void showMenu() {
            System.out.println("\n--- Menu for " + name + " ---");
            for (int i = 0; i < itemCount; i++) {
                System.out.println((i + 1) + ". " + menu[i].name + " - $" + menu[i].price);
            }
        }
    }

    // Specific restaurant classes that extend Restaurant

    static class AsianRestaurant extends Restaurant {
        public AsianRestaurant(String name) {
            super(name);
        }

        public void populateMenu() {
            addMenuItem(new MenuItem("Sushi Roll", 12.99));
            addMenuItem(new MenuItem("Ramen", 10.50));
            addMenuItem(new MenuItem("Fried Rice", 8.75));
        }
    }

    static class AfricanRestaurant extends Restaurant {
        public AfricanRestaurant(String name) {
            super(name);
        }

        public void populateMenu() {
            addMenuItem(new MenuItem("Jollof Rice", 9.99));
            addMenuItem(new MenuItem("Suya", 11.25));
            addMenuItem(new MenuItem("Egusi Soup", 13.50));
        }
    }

    static class HispanicRestaurant extends Restaurant {
        public HispanicRestaurant(String name) {
            super(name);
        }

        public void populateMenu() {
            addMenuItem(new MenuItem("Tacos", 9.00));
            addMenuItem(new MenuItem("Burrito", 10.00));
            addMenuItem(new MenuItem("Quesadilla", 8.50));
        }
    }

    static class AmericanRestaurant extends Restaurant {
        public AmericanRestaurant(String name) {
            super(name);
        }

        public void populateMenu() {
            addMenuItem(new MenuItem("Cheeseburger", 10.99));
            addMenuItem(new MenuItem("Hot Dog", 7.99));
            addMenuItem(new MenuItem("BBQ Ribs", 14.50));
        }
    }

    // Main class for starting the FoodOrderingApp
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Food Ordering App!");

        // Get user information with validation
        String name = getValidInput(scanner, "Enter your name: ");
        String address = getValidInput(scanner, "Enter your delivery address: ");

        Customer customer = new Customer(name, address);

        while (true) {
            // Let the user select a restaurant type
            Restaurant restaurant = selectRestaurant(scanner);
            System.out.println("\nYou selected: " + restaurant.name);
            restaurant.showMenu();

            // Let the user add items to the cart
            selectItems(scanner, customer, restaurant);

            // Ask if the user wants to go back to restaurant selection or proceed
            System.out.println("\nWould you like to:");
            System.out.println("1. Go back to choose another restaurant");
            System.out.println("2. Continue to checkout");

            int choice = getValidChoice(scanner, 1, 2);

            if (choice == 1) {
                continue; // restart the loop to choose another restaurant
            } else if (choice == 2) {
                // Proceed to checkout
                checkout(customer);
                break; // end the loop
            }
        }

        scanner.close(); // Close scanner after use
    }

    // Helper method to get valid input from the user (non-empty strings)
    public static String getValidInput(Scanner scanner, String prompt) {
        String input;
        while (true) {
            System.out.print(prompt);
            input = scanner.nextLine().trim();
            if (!input.isEmpty()) {
                return input;
            } else {
                System.out.println("Input cannot be empty, please try again.");
            }
        }
    }

    // Helper method to get a valid choice (within range)
    public static int getValidChoice(Scanner scanner, int min, int max) {
        int choice;
        while (true) {
            System.out.print("Please enter a choice (" + min + "-" + max + "): ");
            if (scanner.hasNextInt()) {
                choice = scanner.nextInt();
                if (choice >= min && choice <= max) {
                    return choice;
                } else {
                    System.out.println("Invalid choice. Please try again.");
                }
            } else {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // consume invalid input
            }
        }
    }

    // Select a restaurant and return the corresponding restaurant object
    public static Restaurant selectRestaurant(Scanner scanner) {
        while (true) {
            System.out.println("\nChoose a restaurant type:");
            System.out.println("1. Asian");
            System.out.println("2. African");
            System.out.println("3. Hispanic");
            System.out.println("4. American");

            int choice = getValidChoice(scanner, 1, 4);

            switch (choice) {
                case 1: return new AsianRestaurant("Wok Express");
                case 2: return new AfricanRestaurant("Taste of Africa");
                case 3: return new HispanicRestaurant("Casa Mexicana");
                case 4: return new AmericanRestaurant("Grill & Chill");
                default:
                    System.out.println("Invalid selection. Please try again.");
            }
        }
    }

    // Let the customer select items from the restaurant menu
    public static void selectItems(Scanner scanner, Customer customer, Restaurant restaurant) {
        System.out.println("\nEnter the item numbers to add to cart (0 to finish):");

        while (true) {
            int selection = getValidChoice(scanner, 0, restaurant.itemCount);

            if (selection == 0) break; // Stop adding items

            customer.addToCart(restaurant.menu[selection - 1]);
        }
    }

    // Handle checkout and process the payment
    public static void checkout(Customer customer) {
        System.out.println("\nCheckout");
        System.out.println("Processing payment...");

        // Only credit card option
        Payable payment = new CreditCardPayment();
        customer.checkout(payment);
    }
}
